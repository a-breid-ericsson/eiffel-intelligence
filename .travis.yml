sudo: required

dist: xenial

language: java

services:
  - docker

env:
  - JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-amd64

# Run before every job
before_install:
  - sudo apt-get update
  - sudo apt-get install -y openjdk-8-jdk
  - PATH=$(echo "$PATH" | sed -e 's/:\/usr\/local\/lib\/jvm\/openjdk11\/bin//')
  - java -version
  - uname -a
  - chmod +x pom.xml


# This is only run before integrationTests job
# To ensure docker containers are fully up and running we sleep 60s
before_script:
  - source src/main/docker/env.bash
  - docker-compose -f src/main/docker/docker-compose.yml up -d mongodb rabbitmq eiffel-er jenkins mail-server
  - sleep 60


# Generate site documentation using mvn site plugin
before_deploy:
  - rm -rf docs
  - mvn site -B


# Using default stage 'test' for all our test jobs, and only running deploy stage
# (after merge) to master branch
stages:
  - coverage
  - test
  - name: deploy
    if: branch = master


# List of jobs to run, tied to specific stages
jobs:
  include:
    - stage: test
      name: functionalTests
      before_script: skip
      script:
        # We will run one test using embedded mongodb first that will download the mongo instance and
        # then the rest of the test that will no longer need to download the embedded mongo since it will exist.
        #
        # Also important that the first test to be run is a Spring Boot Test since spring boot also downloads
        # another version of embedded mongo db to avoid race conditions between Spring Boot tests
        - mvn -Dsurefire.rerunFailingTestsCount=2 -DsomeModule.test.includes="**/QueryServiceTest.java" test -DskipITs -B
        - mvn -Dsurefire.rerunFailingTestsCount=2 -DsomeModule.test.excludes="**/QueryServiceTest.java" test -DskipITs -B
    - stage: test
      name: integrationTests
      script:
        - mvn verify -DskipUTs -Der.url=http://localhost:8084/search/ -Drabbitmq.exchange.name=ei-exchange -Dspring.mail.host=localhost -Dspring.mail.port=1025 -Dwaitlist.fixedRateResend=1 -B
    - stage: coverage
      name: coverage
      before_script: skip
      script:
        - mvn cobertura:cobertura -B
        - sudo apt-get install jq
        - curl -Ls -o codacy-coverage-reporter-assembly.jar $(curl -Ls https://api.github.com/repos/codacy/codacy-coverage-reporter/releases/latest | jq -r '.assets | map({content_type, browser_download_url} | select(.content_type | contains("java-archive"))) | .[0].browser_download_url')
        - ls -la
        - java -jar codacy-coverage-reporter-assembly.jar report -l Java -r target/site/cobertura/cobertura.xml
    - stage: deploy
      name: deployGitHubPages
      before_script: skip   # do not run this on deploy
      script: skip          # do not run default test scripts
      install: skip         # do not run default mvn install
      deploy:
        provider: pages
        skip_cleanup: true
        github-token: $GITHUB_TOKEN
        local_dir: docs/
